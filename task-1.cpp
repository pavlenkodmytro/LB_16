#include <iostream>   // Підключення бібліотеки для вводу/виводу. Забезпечує std::cout для виводу результатів.
#include <ctime>      // Підключення бібліотеки для роботи з часом: функції time() і localtime().
using namespace std;

//***********************************************************************
// Структура Date для збереження дати.
//***********************************************************************
struct Date {
    int year;   // Рік
    int month;  // Місяць (від 1 до 12)
    int day;    // День (від 1 до 31)
};

//***********************************************************************
// Функція isLeap
// Перевіряє, чи є рік високосним.
// Аргумент: int year – перевірюваний рік.
// Повертає: true, якщо рік високосний, або false, якщо ні.
//***********************************************************************
bool isLeap(int year) {
    // Рік високосний, якщо:
    // 1) він ділиться на 4, але не ділиться на 100, або
    // 2) він ділиться на 400.
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
}

//***********************************************************************
// Функція monthLength
// Повертає кількість днів у заданому місяці конкретного року.
// Використовується конструкція switch для визначення довжини місяця.
//***********************************************************************
int monthLength(int year, int month) {
    switch (month) {
        case 1:  // Січень
        case 3:  // Березень
        case 5:  // Травень
        case 7:  // Липень
        case 8:  // Серпень
        case 10: // Жовтень
        case 12: // Грудень
            return 31;  // Для цих місяців завжди 31 день.
        case 4:  // Квітень
        case 6:  // Червень
        case 9:  // Вересень
        case 11: // Листопад
            return 30;  // Для цих місяців завжди 30 днів.
        case 2:  // Лютий
            // Для лютого кількість днів залежить від високосності року.
            return isLeap(year) ? 29 : 28;
        default:
            return 0;   // Якщо номер місяця некоректний, повертаємо 0.
    }
}

//***********************************************************************
// Функція today
// Повертає поточну дату у структурі Date.
// Не приймає аргументів.
// Використовує функції time() та localtime() для отримання поточного календарного часу.
//***********************************************************************
Date today(void) {
    Date currentDate;        // Створюємо змінну типу Date для збереження поточної дати.
    time_t t = time(NULL);   // Функція time(NULL) повертає поточний час у секундах від Epoch (1 січня 1970).
    // Функція localtime приймає адресу змінної типу time_t і повертає вказівник на структуру tm, що містить локальний час.
    tm localTime = *localtime(&t);
    
    // Структура tm містить роки, починаючи з 1900, тому додаємо 1900 до tm_year.
    currentDate.year = localTime.tm_year + 1900;
    // tm_mon містить місяці від 0 (січень) до 11 (грудень), тому додаємо 1.
    currentDate.month = localTime.tm_mon + 1;
    // tm_mday містить номер дня місяця.
    currentDate.day = localTime.tm_mday;
    
    return currentDate;  // Повертаємо заповнену структуру Date.
}

//***********************************************************************
// Функція daysFromStart
// Обчислює кількість днів, що пройшли від 1 січня 1-го року до заданої дати.
// Використовує функції isLeap та monthLength.
//***********************************************************************
int daysFromStart(const Date &d) {
    int days = 0;
    // Додаємо кількість днів за повні роки, що передують року d.year.
    // Пробігаємо по роках від 1 до (d.year - 1).
    for (int y = 1; y < d.year; y++) {
        // Якщо рік високосний, додаємо 366 днів, інакше 365.
        days += isLeap(y) ? 366 : 365;
    }
    // Додаємо дні за повні місяці у році d.year, що передують місяцю d.month.
    for (int m = 1; m < d.month; m++) {
        days += monthLength(d.year, m);
    }
    // Додаємо дні поточного місяця.
    days += d.day;
    return days;
}

//***********************************************************************
// Функція daysBetweenDates
// Обчислює різницю у днях між двома датами.
//***********************************************************************
int daysBetweenDates(const Date &d1, const Date &d2) {
    // Обчислюємо загальну кількість днів від 1 січня 1-го року до кожної з дат.
    int days1 = daysFromStart(d1);
    int days2 = daysFromStart(d2);
    // Повертаємо абсолютну різницю між кількістю днів.
    return (days2 >= days1) ? (days2 - days1) : (days1 - days2);
}

//***********************************************************************
// Функція main
// Основна точка входу в програму.
// Обчислює кількість днів, що пройшли від вашого дня народження до поточної дати.
//***********************************************************************
int main(void) {
    // Вкажіть свій день народження (змініть значення згідно з вашим).
    // Наприклад, для дня народження 15 травня 1990 року:
    Date myBirthday = {1990, 5, 15};
    
    // Отримуємо поточну дату за допомогою функції today().
    Date currentDate = today();
    
    // Обчислюємо кількість днів між вашим днем народження та поточною датою.
    int daysPassed = daysBetweenDates(myBirthday, currentDate);
    
    // Виводимо результати.
    cout << "My birthday: " 
         << myBirthday.year << "-" << myBirthday.month << "-" << myBirthday.day << endl;
    cout << "Current date: " 
         << currentDate.year << "-" << currentDate.month << "-" << currentDate.day << endl;
    cout << "Numbers of days from birthday to now: " 
         << daysPassed << endl;
    
    return 0;  // Повертаємо 0, що означає успішне завершення програми.
}
